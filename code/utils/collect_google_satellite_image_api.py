{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "53b7c7ef-40d2-4d65-b18e-c222f2dd0069",
   "metadata": {},
   "source": [
    "# Utility function to collect the google satellite images given the lattitude and longitude using google MapStatic API."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "17a16f9a-999a-4159-89ff-b51e31ad9616",
   "metadata": {},
   "outputs": [],
   "source": [
    "# API KEY to collect the images. The utilization of each API call using the below API_KEY will be charged.\n",
    "\n",
    "API_KEY = \"AIzaSyCecIEh8dI_uaTNvBvWiAoEP-gBAd0FOiQ\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "101183e7-ba45-4053-97a3-f910bfc44335",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import os\n",
    "\n",
    "# constants\n",
    "IMAGE_WIDTH = 288\n",
    "IMAGE_HEIGHT = 288\n",
    "\n",
    "def save_satellite_image(lat, lon, zoom=20, api_key=None, street_name = None, output_dir=None):\n",
    "    \"\"\"\n",
    "    Saves a satellite image from Google Map Static API based on latitude and longitude.\n",
    "\n",
    "    Args:\n",
    "        lat (float): Latitude of the location.\n",
    "        lon (float): Longitude of the location.\n",
    "        zoom (int, optional): Zoom level (default is 20).\n",
    "        api_key (str, optional): Your Google Maps API key (if required).\n",
    "        street_name (str, optional): To keep track of the point (lat,lon) (which street it belongs to).\n",
    "        output_dir (str, optional): Directory to save the image (default is \"satellite_images\").\n",
    "\n",
    "    Returns:\n",
    "        str: Path to the saved image. \n",
    "        if succeed, returns and prints the path to saved image.\n",
    "        else prints an error message.\n",
    "    \"\"\"\n",
    "    # Create the output directory if it doesn't exist\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "    # Construct the API URL\n",
    "    base_url = \"https://maps.googleapis.com/maps/api/staticmap\"\n",
    "    params = {\n",
    "        \"center\": f\"{lat},{lon}\",\n",
    "        \"zoom\": zoom,\n",
    "        \"size\": f\"{IMAGE_WIDTH}x{IMAGE_HEIGHT}\",\n",
    "        \"maptype\": \"satellite\",\n",
    "        \"key\": api_key,\n",
    "    }\n",
    "\n",
    "    # Make the API request\n",
    "    response = requests.get(base_url, params=params)\n",
    "\n",
    "    #Check the response status\n",
    "    if response.status_code == 200:\n",
    "        # Save the image\n",
    "        image_path = os.path.join(output_dir, f\"satellite_{lat}_{lon}_{street_name}.png\")\n",
    "        with open(image_path, \"wb\") as f:\n",
    "            f.write(response.content)\n",
    "        print(f\"Satellite image saved as {image_path}\")\n",
    "        return image_path\n",
    "    else:\n",
    "        print(f\"Error fetching the image. Status code: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d64d03db-8f3b-488c-a207-c8f99a8fa4e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image\n",
    "import cv2\n",
    "\n",
    "\n",
    "\n",
    "def display_images_from_folder(folder_path):\n",
    "    # Get a list of image files in the folder\n",
    "    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]\n",
    "    i = 0\n",
    "    # Display each image\n",
    "    for image_file in image_files:\n",
    "        image_path = os.path.join(folder_path, image_file)\n",
    "        img = Image.open(image_path)\n",
    "        plt.imshow(img)\n",
    "        plt.title(image_file)\n",
    "        plt.axis('off')\n",
    "        plt.show()\n",
    "        i= i+1;\n",
    "        if i ==20:\n",
    "            break;\n",
    "\n",
    "\n",
    "def display_images_from_folder_10_per_row(folder_path):\n",
    "    # Get a list of image files in the folder\n",
    "    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]\n",
    "\n",
    "    # Initialize variables for row and column\n",
    "    rows = len(image_files) // 10 + 1\n",
    "    cols = min(len(image_files), 10)\n",
    "\n",
    "    # Create a figure with subplots\n",
    "    fig, axes = plt.subplots(rows, cols, figsize=(20, 20))\n",
    "\n",
    "    # Iterate over image files and display them\n",
    "    for i, image_file in enumerate(image_files):\n",
    "        img = cv2.imread(os.path.join(folder_path, image_file))\n",
    "        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "        row, col = i // 10, i % 10\n",
    "        axes[row, col].imshow(img)\n",
    "        axes[row, col].axis('off')\n",
    "        axes[row, col].set_title(image_file)\n",
    "\n",
    "    # Hide empty subplots\n",
    "    for i in range(len(image_files), rows * cols):\n",
    "        axes[i // 10, i % 10].axis('off')\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "osm_gpd",
   "language": "python",
   "name": "osm_gpd"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
